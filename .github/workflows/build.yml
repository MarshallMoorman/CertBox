name: Build and Release CertBox

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read  # Default for build jobs

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - runtime: win-x64
            artifact-suffix: win-x64
          - runtime: win-arm64
            artifact-suffix: win-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.100'

      - name: Restore dependencies
        run: dotnet restore CertBox.sln

      - name: Build solution
        run: dotnet build CertBox.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test CertBox.sln --configuration Release --no-build --verbosity normal

      - name: Publish CertBox (with trimming disabled)
        run: dotnet publish src/CertBox/CertBox.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:PublishTrimmed=false -p:DebugType=portable -o ./publish/${{ matrix.runtime }}

      - name: Zip artifact
        shell: powershell
        run: |
          Compress-Archive -Path ./publish/${{ matrix.runtime }}/* -DestinationPath ./CertBox-${{ matrix.artifact-suffix }}.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CertBox-${{ matrix.artifact-suffix }}
          path: ./CertBox-${{ matrix.artifact-suffix }}.zip
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - runtime: linux-x64
            artifact-suffix: linux-x64
          - runtime: linux-arm64
            artifact-suffix: linux-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.100'

      - name: Restore dependencies
        run: dotnet restore CertBox.sln

      - name: Build solution
        run: dotnet build CertBox.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test CertBox.sln --configuration Release --no-build --verbosity normal

      - name: Publish CertBox (with trimming disabled)
        run: dotnet publish src/CertBox/CertBox.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:PublishTrimmed=false -p:DebugType=portable -o ./publish/${{ matrix.runtime }}

      - name: Zip artifact
        run: |
          cd ./publish/${{ matrix.runtime }}
          zip -r ../../CertBox-${{ matrix.artifact-suffix }}.zip .
          cd ../..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CertBox-${{ matrix.artifact-suffix }}
          path: ./CertBox-${{ matrix.artifact-suffix }}.zip
          if-no-files-found: error

  build-macos-arm64:
    runs-on: macos-latest
    strategy:
      matrix:
        runtime: [osx-arm64]
        artifact-suffix: [macos-arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.100'

      - name: Restore dependencies
        run: dotnet restore CertBox.sln

      - name: Build solution
        run: dotnet build CertBox.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test CertBox.sln --configuration Release --no-build --verbosity normal

      - name: Publish CertBox (with trimming disabled)
        run: dotnet publish src/CertBox/CertBox.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:PublishTrimmed=false -p:DebugType=portable -o ./publish/${{ matrix.runtime }}

      - name: Create macOS .app bundle
        run: |
          mkdir -p ./publish/CertBox.app/Contents/MacOS
          mkdir -p ./publish/CertBox.app/Contents/Resources
          cp ./publish/${{ matrix.runtime }}/CertBox ./publish/CertBox.app/Contents/MacOS/
          cp ./publish/${{ matrix.runtime }}/lib*.dylib ./publish/CertBox.app/Contents/MacOS/
          cp ./publish/${{ matrix.runtime }}/appsettings.json ./publish/CertBox.app/Contents/Resources/
          cp src/CertBox/Assets/CertBox.icns ./publish/CertBox.app/Contents/Resources/CertBox.icns
          cp src/CertBox/Assets/Info.plist ./publish/CertBox.app/Contents/Info.plist
          cp src/CertBox/Assets/CertBox.entitlements ./publish/CertBox.entitlements

      - name: Install Apple certificate
        env:
          DEVELOPER_ID_CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_CERTIFICATE_BASE64 }}
          DEVELOPER_ID_CERTIFICATE_PASSWORD: ${{ secrets.DEVELOPER_ID_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$DEVELOPER_ID_CERTIFICATE_BASE64" | base64 -d -o $CERTIFICATE_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$DEVELOPER_ID_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Sign macOS .app bundle
        run: |
          for dylib in ./publish/CertBox.app/Contents/MacOS/lib*.dylib; do
            codesign --force --sign "Developer ID Application: Marshall Moorman (C9M8R6BZWV)" \
              --options runtime \
              --entitlements ./publish/CertBox.entitlements \
              --timestamp \
              "$dylib"
          done
          codesign --force --sign "Developer ID Application: Marshall Moorman (C9M8R6BZWV)" \
            --options runtime \
            --entitlements ./publish/CertBox.entitlements \
            --timestamp \
            ./publish/CertBox.app/Contents/MacOS/CertBox
          codesign --force --deep --sign "Developer ID Application: Marshall Moorman (C9M8R6BZWV)" \
            --options runtime \
            --entitlements ./publish/CertBox.entitlements \
            --timestamp \
            ./publish/CertBox.app

      - name: Verify signature pre-notarization
        run: |
          codesign -dvv ./publish/CertBox.app
          codesign --deep-verify -vv ./publish/CertBox.app

      - name: Notarize macOS .app bundle
        env:
          APPSTORE_CONNECT_API_KEY_BASE64: ${{ secrets.APPSTORE_CONNECT_API_KEY_BASE64 }}
          APPSTORE_CONNECT_KEY_ID: ${{ secrets.APPSTORE_CONNECT_KEY_ID }}
          APPSTORE_CONNECT_ISSUER_ID: ${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}
        run: |
          API_KEY_PATH=$RUNNER_TEMP/AuthKey_${{ secrets.APPSTORE_CONNECT_KEY_ID }}.p8
          echo -n "$APPSTORE_CONNECT_API_KEY_BASE64" | base64 -d -o $API_KEY_PATH
          cd ./publish
          zip -r CertBox-notarize.zip CertBox.app
          xcrun notarytool submit CertBox-notarize.zip \
            --key $API_KEY_PATH \
            --key-id "${{ secrets.APPSTORE_CONNECT_KEY_ID }}" \
            --issuer "${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}" \
            --wait \
            --output-format json > notarization-result.json || {
            echo "Notarization submission failed. Fetching logs..."
            SUBMISSION_ID=$(jq -r '.id' notarization-result.json 2>/dev/null || echo "unknown")
            if [ "$SUBMISSION_ID" != "unknown" ]; then
              xcrun notarytool log "$SUBMISSION_ID" \
                --key $API_KEY_PATH \
                --key-id "${{ secrets.APPSTORE_CONNECT_KEY_ID }}" \
                --issuer "${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}" \
                notarization-log.json || echo "Failed to fetch logs"
              cat notarization-log.json 2>/dev/null || echo "No log file available"
            fi
            exit 1
          }
          SUBMISSION_ID=$(jq -r '.id' notarization-result.json)
          STATUS=$(jq -r '.status' notarization-result.json)
          echo "Notarization Submission ID: $SUBMISSION_ID"
          echo "Notarization Status: $STATUS"
          if [ "$STATUS" != "Accepted" ]; then
            echo "Notarization failed. Fetching detailed logs..."
            xcrun notarytool log "$SUBMISSION_ID" \
              --key $API_KEY_PATH \
              --key-id "${{ secrets.APPSTORE_CONNECT_KEY_ID }}" \
              --issuer "${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}" \
              notarization-log.json
            cat notarization-log.json
            exit 1
          fi
          xcrun stapler staple CertBox.app

      - name: Verify signature post-notarization
        run: |
          codesign -dvv ./publish/CertBox.app
          spctl -a -t exec -vv ./publish/CertBox.app

      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

      - name: Zip macOS raw artifact
        run: |
          cd ./publish/${{ matrix.runtime }}
          zip -r ../../CertBox-${{ matrix.artifact-suffix }}.zip .
          cd ../..

      - name: Upload macOS raw artifact
        uses: actions/upload-artifact@v4
        with:
          name: CertBox-${{ matrix.artifact-suffix }}
          path: ./CertBox-${{ matrix.artifact-suffix }}.zip
          if-no-files-found: error

      - name: Zip macOS .app bundle
        run: |
          cd ./publish
          zip -r CertBox-${{ matrix.artifact-suffix }}.app.zip CertBox.app
          mv CertBox-${{ matrix.artifact-suffix }}.app.zip ../

      - name: Upload macOS .app bundle as separate artifact
        uses: actions/upload-artifact@v4
        with:
          name: CertBox-${{ matrix.artifact-suffix }}-app
          path: ./CertBox-${{ matrix.artifact-suffix }}.app.zip
          if-no-files-found: error

      - name: Zip macOS debug symbols
        run: |
          cd ./publish/${{ matrix.runtime }}
          zip -r ../../CertBox-${{ matrix.artifact-suffix }}-debug.zip *.pdb
          cd ../..

      - name: Upload macOS debug symbols as separate artifact
        uses: actions/upload-artifact@v4
        with:
          name: CertBox-${{ matrix.artifact-suffix }}-debug
          path: ./CertBox-${{ matrix.artifact-suffix }}-debug.zip
          if-no-files-found: error

  build-macos-x64:
    runs-on: macos-latest
    strategy:
      matrix:
        runtime: [osx-x64]
        artifact-suffix: [macos-x64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.100'

      - name: Restore dependencies
        run: dotnet restore CertBox.sln

      - name: Build solution
        run: dotnet build CertBox.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test CertBox.sln --configuration Release --no-build --verbosity normal

      - name: Publish CertBox (with trimming disabled)
        run: dotnet publish src/CertBox/CertBox.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:PublishTrimmed=false -p:DebugType=portable -o ./publish/${{ matrix.runtime }}

      - name: Create macOS .app bundle
        run: |
          mkdir -p ./publish/CertBox.app/Contents/MacOS
          mkdir -p ./publish/CertBox.app/Contents/Resources
          cp ./publish/${{ matrix.runtime }}/CertBox ./publish/CertBox.app/Contents/MacOS/
          cp ./publish/${{ matrix.runtime }}/lib*.dylib ./publish/CertBox.app/Contents/MacOS/
          cp ./publish/${{ matrix.runtime }}/appsettings.json ./publish/CertBox.app/Contents/Resources/
          cp src/CertBox/Assets/CertBox.icns ./publish/CertBox.app/Contents/Resources/CertBox.icns
          cp src/CertBox/Assets/Info.plist ./publish/CertBox.app/Contents/Info.plist
          cp src/CertBox/Assets/CertBox.entitlements ./publish/CertBox.entitlements

      - name: Install Apple certificate
        env:
          DEVELOPER_ID_CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_CERTIFICATE_BASE64 }}
          DEVELOPER_ID_CERTIFICATE_PASSWORD: ${{ secrets.DEVELOPER_ID_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$DEVELOPER_ID_CERTIFICATE_BASE64" | base64 -d -o $CERTIFICATE_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$DEVELOPER_ID_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Sign macOS .app bundle
        run: |
          for dylib in ./publish/CertBox.app/Contents/MacOS/lib*.dylib; do
            codesign --force --sign "Developer ID Application: Marshall Moorman (C9M8R6BZWV)" \
              --options runtime \
              --entitlements ./publish/CertBox.entitlements \
              --timestamp \
              "$dylib"
          done
          codesign --force --sign "Developer ID Application: Marshall Moorman (C9M8R6BZWV)" \
            --options runtime \
            --entitlements ./publish/CertBox.entitlements \
            --timestamp \
            ./publish/CertBox.app/Contents/MacOS/CertBox
          codesign --force --deep --sign "Developer ID Application: Marshall Moorman (C9M8R6BZWV)" \
            --options runtime \
            --entitlements ./publish/CertBox.entitlements \
            --timestamp \
            ./publish/CertBox.app

      - name: Verify signature pre-notarization
        run: |
          codesign -dvv ./publish/CertBox.app
          codesign --deep-verify -vv ./publish/CertBox.app

      - name: Notarize macOS .app bundle
        env:
          APPSTORE_CONNECT_API_KEY_BASE64: ${{ secrets.APPSTORE_CONNECT_API_KEY_BASE64 }}
          APPSTORE_CONNECT_KEY_ID: ${{ secrets.APPSTORE_CONNECT_KEY_ID }}
          APPSTORE_CONNECT_ISSUER_ID: ${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}
        run: |
          API_KEY_PATH=$RUNNER_TEMP/AuthKey_${{ secrets.APPSTORE_CONNECT_KEY_ID }}.p8
          echo -n "$APPSTORE_CONNECT_API_KEY_BASE64" | base64 -d -o $API_KEY_PATH
          cd ./publish
          zip -r CertBox-notarize.zip CertBox.app
          xcrun notarytool submit CertBox-notarize.zip \
            --key $API_KEY_PATH \
            --key-id "${{ secrets.APPSTORE_CONNECT_KEY_ID }}" \
            --issuer "${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}" \
            --wait \
            --output-format json > notarization-result.json || {
            echo "Notarization submission failed. Fetching logs..."
            SUBMISSION_ID=$(jq -r '.id' notarization-result.json 2>/dev/null || echo "unknown")
            if [ "$SUBMISSION_ID" != "unknown" ]; then
              xcrun notarytool log "$SUBMISSION_ID" \
                --key $API_KEY_PATH \
                --key-id "${{ secrets.APPSTORE_CONNECT_KEY_ID }}" \
                --issuer "${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}" \
                notarization-log.json || echo "Failed to fetch logs"
              cat notarization-log.json 2>/dev/null || echo "No log file available"
            fi
            exit 1
          }
          SUBMISSION_ID=$(jq -r '.id' notarization-result.json)
          STATUS=$(jq -r '.status' notarization-result.json)
          echo "Notarization Submission ID: $SUBMISSION_ID"
          echo "Notarization Status: $STATUS"
          if [ "$STATUS" != "Accepted" ]; then
            echo "Notarization failed. Fetching detailed logs..."
            xcrun notarytool log "$SUBMISSION_ID" \
              --key $API_KEY_PATH \
              --key-id "${{ secrets.APPSTORE_CONNECT_KEY_ID }}" \
              --issuer "${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}" \
              notarization-log.json
            cat notarization-log.json
            exit 1
          fi
          xcrun stapler staple CertBox.app

      - name: Verify signature post-notarization
        run: |
          codesign -dvv ./publish/CertBox.app
          spctl -a -t exec -vv ./publish/CertBox.app

      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

      - name: Zip macOS raw artifact
        run: |
          cd ./publish/${{ matrix.runtime }}
          zip -r ../../CertBox-${{ matrix.artifact-suffix }}.zip .
          cd ../..

      - name: Upload macOS raw artifact
        uses: actions/upload-artifact@v4
        with:
          name: CertBox-${{ matrix.artifact-suffix }}
          path: ./CertBox-${{ matrix.artifact-suffix }}.zip
          if-no-files-found: error

      - name: Zip macOS .app bundle
        run: |
          cd ./publish
          zip -r CertBox-${{ matrix.artifact-suffix }}.app.zip CertBox.app
          mv CertBox-${{ matrix.artifact-suffix }}.app.zip ../

      - name: Upload macOS .app bundle as separate artifact
        uses: actions/upload-artifact@v4
        with:
          name: CertBox-${{ matrix.artifact-suffix }}-app
          path: ./CertBox-${{ matrix.artifact-suffix }}.app.zip
          if-no-files-found: error

      - name: Zip macOS debug symbols
        run: |
          cd ./publish/${{ matrix.runtime }}
          zip -r ../../CertBox-${{ matrix.artifact-suffix }}-debug.zip *.pdb
          cd ../..

      - name: Upload macOS debug symbols as separate artifact
        uses: actions/upload-artifact@v4
        with:
          name: CertBox-${{ matrix.artifact-suffix }}-debug
          path: ./CertBox-${{ matrix.artifact-suffix }}-debug.zip
          if-no-files-found: error

  release:
    needs: [build-windows, build-linux, build-macos-arm64, build-macos-x64]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Explicitly grant write permissions for release job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release count
        id: release_count
        run: |
          RELEASE_COUNT=$(gh api repos/MarshallMoorman/CertBox/releases --jq 'length')
          NEXT_RELEASE=$((RELEASE_COUNT + 1))
          echo "release_number=$NEXT_RELEASE" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.release_count.outputs.release_number }}
          name: CertBox Release v${{ steps.release_count.outputs.release_number }}
          draft: false
          prerelease: false
          files: |
            artifacts/CertBox-win-x64/CertBox-win-x64.zip
            artifacts/CertBox-win-arm64/CertBox-win-arm64.zip
            artifacts/CertBox-linux-x64/CertBox-linux-x64.zip
            artifacts/CertBox-linux-arm64/CertBox-linux-arm64.zip
            artifacts/CertBox-macos-arm64/CertBox-macos-arm64.zip
            artifacts/CertBox-macos-x64/CertBox-macos-x64.zip
            artifacts/CertBox-macos-arm64-app/CertBox-macos-arm64.app.zip
            artifacts/CertBox-macos-x64-app/CertBox-macos-x64.app.zip
            artifacts/CertBox-macos-arm64-debug/CertBox-macos-arm64-debug.zip
            artifacts/CertBox-macos-x64-debug/CertBox-macos-x64-debug.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}